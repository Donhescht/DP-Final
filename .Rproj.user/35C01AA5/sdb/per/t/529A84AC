{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(dplyr)\n\n# Initially load the needed NFL data\nset.seed(100)\nTOPD.All <- read.csv(\"TurnOverPointData.txt\")  # [T]urn [O]ver [P]oint [D]ifferential \nTOPD <- TOPD.All %>% filter(gameid < 2015000000)\nTOPD <- mutate(TOPD, PlayYear = round(gameid/1000000,0)-2008)\nTOPD.Test <- TOPD.All %>% filter(gameid > 2015000000)\n\nWtDen <- sum(unique(TOPD$PlayYear))\n\nMean.Stats.Away <- TOPD %>% group_by(away_team,PlayYear) %>% summarise_all(mean) %>% \n    select(PlayYear,away_team, away_score, home_score, home_turnovers) %>% \n    mutate(HW = 'A') %>% \n    mutate(Weighted=PlayYear/WtDen ) %>%\n    mutate(Team = away_team, Mean.PF=away_score * Weighted, Mean.PA = home_score * Weighted, Mean.FTO=home_turnovers *Weighted) %>%\n    select(Team, Mean.PF, Mean.PA, Mean.FTO) %>%\n    group_by(Team) %>% summarise_if(is.numeric, sum)\n\n    \nMean.Stats.Home <- TOPD %>% group_by(home_team,PlayYear) %>% summarise_all(mean) %>% \n    select(PlayYear,home_team, home_score, away_score, away_turnovers) %>% \n    mutate(HW = 'A') %>% \n    mutate(Weighted=PlayYear/WtDen ) %>%\n    mutate(Team = home_team, Mean.PF=home_score * Weighted, Mean.PA = away_score * Weighted, Mean.FTO=away_turnovers *Weighted) %>%\n    select(Team, Mean.PF, Mean.PA, Mean.FTO) %>%\n    group_by(Team) %>% summarise_if(is.numeric, sum)\n\nMean.Stats <- rbind(Mean.Stats.Away, Mean.Stats.Home)\nMean.PA <- mean(Mean.Stats$Mean.PA)\nMean.PF <- mean(Mean.Stats$Mean.PF)\n\n# Get a team score using their mean points for, opponent points against \n# and how many turnovers they force.\nGetScoreDif <- function(Home.Team, Away.Team, PF.Gain,PA.Gain, TO.Gain ) {\n    hteampf <-  Mean.Stats.Home[Mean.Stats.Home$Team == Home.Team,2]\n    ateampf <-  Mean.Stats.Away[Mean.Stats.Away$Team == Away.Team,2]\n    hteampa <-  Mean.Stats.Home[Mean.Stats.Home$Team == Home.Team,3]\n    ateampa <-  Mean.Stats.Away[Mean.Stats.Away$Team == Away.Team,3]\n    hteamfto <- Mean.Stats.Home[Mean.Stats.Home$Team == Home.Team,4]\n    ateamfto <- Mean.Stats.Away[Mean.Stats.Away$Team == Away.Team,4]\n    \n    scoredif <- (PF.Gain * hteampf * (PA.Gain * (ateampa/Mean.PA)) + \n        (TO.Gain * hteamfto)) -\n        (PF.Gain * ateampf * (PA.Gain * (hteampa/Mean.PA)) + \n        (TO.Gain * ateamfto))\n    return(scoredif)\n}\n\nshinyServer(function(input, output) {\n    updateTOPD <- reactive ({\n        TOPD.Test <<-TOPD.Test %>% rowwise() %>% \n                mutate(PredPtsDif = GetScoreDif(\n                    home_team,\n                    away_team,\n                    input$PtsForGain,\n                    input$PtsAgtGain,\n                    input$TOGain\n                )\n            )\n        TOPD.Test <<- TOPD.Test %>% mutate(PredPtsError = PointDifHome - PredPtsDif)\n        TOPD.Test <<- TOPD.Test %>% mutate(WinCorrect = as.numeric((PredPtsDif * PointDifHome) > 0))\n        TOPD.Test <<- TOPD.Test %>% mutate(Wins = as.numeric(PointDifHome > 0))\n        TOPD.Test <<- TOPD.Test %>% mutate(Losses = as.numeric(PointDifHome <= 0))\n        TOPD.Test <<- TOPD.Test %>% mutate(PWins = as.numeric(PredPtsDif > 0))\n        TOPD.Test <<- TOPD.Test %>% mutate(PLosses = as.numeric(PredPtsDif <= 0))\n        \n    })\n    \n    output$NLFPredictions <- renderPlot({\n        updateTOPD()\n        \n        p <- hist(x = TOPD.Test$PredPtsError, breaks = 40,freq = TRUE,\n                  xlab = \"Point Difference (Predicted - Actual)\",\n                  main = \"Point Difference Histogram for NFL 2015 Season\",\n                  col = 'blue')\n    })\n\n    output$PredStats <- renderTable({\n        updateTOPD()\n        data.frame(MeanError=mean(TOPD.Test$PredPtsError), StandardError=sd(TOPD.Test$PredPtsError), TotalGames=nrow(TOPD.Test))\n    }, width=400)\n    \n    \n})\n",
    "created" : 1483957818271.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1374114497",
    "id" : "529A84AC",
    "lastKnownWriteTime" : 1485040939,
    "last_content_update" : 1485040939298,
    "path" : "~/Documents/Coursera/DP-Final/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}